version: "3.9"
services:
  user-service:
    build: 
      context: .
      dockerfile: Dockerfile.service
      args:
        service_name: user-service
    container_name: user-service
    image: user-service
    environment:
      APP_PORT: 8000
      APP_DEBUG: 'true'
      APP_NAME: user-service
      REDIS_URL: "user-cache:6379"
      PG_URL: "postgres://postgres:password@postgres:5432/user"
    ports:
        - "8000:8000"
    restart: unless-stopped # Change for 'always' in production environment
    depends_on:
      - user-migration
      - user-cache

  request-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        service_name: request-service
    container_name: request-service
    image: request-service
    environment:
      APP_PORT: 8000
      APP_DEBUG: 'true'
      APP_NAME: request-service
      PG_URL: "postgres://postgres:password@postgres:5432/request"
    ports:
        - "8001:8000"
    restart: unless-stopped # Change for 'always' in production environment

  user-migration:
    image: migrate/migrate
    container_name: user-migration
    volumes:
        - ./user-service/migrations/:/migrations
    command: ["-path", "./migrations", "-database",  "postgres://postgres:password@postgres:5432/user?sslmode=disable", "up"]
    depends_on:
      - postgres
    restart: on-failure

  request-migration:
    image: migrate/migrate
    container_name: request-migration
    volumes:
        - ./request-service/migrations/:/migrations
    command: ["-path", "./migrations", "-database",  "postgres://postgres:password@postgres:5432/request?sslmode=disable", "up"]
    depends_on:
      - postgres
    restart: on-failure

  postgres:
    container_name: postgres
    image: postgres
    volumes:
      - ./scripts/db:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_MULTIPLE_DATABASES=request
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=user
    ports:
      - 5432:5432

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080

  user-cache:
    container_name: user-cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - cache:/data

  integration:
    build:
      context: .
      dockerfile: Dockerfile.integration
    container_name: integration
    image: integration
    environment:
      API_HOST: api-gateway
      API_PORT: 80
      ENV: DOCKER
    depends_on:
      - api-gateway
      - user-service
    restart: on-failure

  api-gateway:
    image: nginx
    container_name: api-gateway
    ports:
      - "80:80"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
    restart: on-failure
    depends_on:
      - user-service

volumes:
  pg-data:
  cache:
      