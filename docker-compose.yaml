version: "3.9"
services:
  user-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        service_name: user-service
    container_name: user-service
    image: user-service
    environment:
      APP_PORT: 8000
      APP_DEBUG: "true"
      APP_NAME: user-service
      REDIS_URL: "user-cache:6379"
      PG_URL: "postgres://postgres:password@postgres:5432/user"
      CORS_ORIGINS: "http://localhost:3000,https://localhost:3000"
    ports:
      - "8000:8000"
    restart: unless-stopped # Change for 'always' in production environment
    depends_on:
      - user-migration
      - user-cache
      

  auction-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        service_name: auction-service
    container_name: auction-service
    image: auction-service
    environment:
      APP_PORT: 8000
      APP_DEBUG: "true"
      APP_NAME: auction-service
      PG_URL: "postgres://postgres:password@postgres:5432/auction"
      CORS_ORIGINS: "http://localhost:3000,https://localhost:3000"
    ports:
      - "8001:8000"
    depends_on:
      - auction-migration
      - zookeeper
      - kafka
    restart: unless-stopped # Change for 'always' in production environment

  bidding-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        service_name: bidding-service
    container_name: bidding-service
    image: bidding-service
    environment:
      APP_PORT: 8000
      APP_DEBUG: "true"
      APP_NAME: bidding-service
      PG_URL: "postgres://postgres:password@postgres:5432/bidding"
      CORS_ORIGINS: "http://localhost:3000,https://localhost:3000"
    ports:
      - "8002:8000"
    depends_on:
      - bidding-migration
      - zookeeper
      - kafka
    restart: unless-stopped # Change for 'always' in production environment

  user-migration:
    image: migrate/migrate
    container_name: user-migration
    volumes:
      - ./services/user-service/migrations/:/migrations
    command:
      [
        "-path",
        "./migrations",
        "-database",
        "postgres://postgres:password@postgres:5432/user?sslmode=disable",
        "up",
      ]
    depends_on:
      - postgres
    restart: on-failure

  auction-migration:
    image: migrate/migrate
    container_name: auction-migration
    volumes:
      - ./services/auction-service/migrations/:/migrations
    command:
      [
        "-path",
        "./migrations",
        "-database",
        "postgres://postgres:password@postgres:5432/auction?sslmode=disable",
        "up",
      ]
    depends_on:
      - postgres
    restart: on-failure

  bidding-migration:
    image: migrate/migrate
    container_name: bidding-migration
    volumes:
      - ./services/bidding-service/migrations/:/migrations
    command:
      [
        "-path",
        "./migrations",
        "-database",
        "postgres://postgres:password@postgres:5432/bidding?sslmode=disable",
        "up",
      ]
    depends_on:
      - postgres
    restart: on-failure

  postgres:
    container_name: postgres
    image: postgres
    volumes:
      - ./scripts/db:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_MULTIPLE_DATABASES=auction,bidding
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=user
    ports:
      - 5432:5432

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080

  user-cache:
    container_name: user-cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data

  integration:
    build:
      context: .
      dockerfile: Dockerfile.integration
    container_name: integration
    image: integration
    environment:
      API_HOST: api-gateway
      API_PORT: 80
      ENV: DOCKER
    depends_on:
      - api-gateway
      - user-service
      - auction-service
      - bidding-service
      - user-migration
      - auction-migration
      - bidding-migration
      - zookeeper
      - kafka
    restart: on-failure

  demo:
    build:
      context: .
      dockerfile: Dockerfile.demo
    container_name: demo
    image: demo
    environment:
      API_URL: "api-gateway"
      POSTGRES_URL: "postgres://postgres:password@postgres:5432"
    depends_on:
      integration:
        condition: service_completed_successfully
    restart: on-failure

  api-gateway:
    image: nginx
    container_name: api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./api-gateway/api_proxy.conf:/etc/nginx/api_proxy.conf
      - ./ssl/cert.pem:/etc/ssl/cert.pem
      - ./ssl/key.pem:/etc/ssl/key.pem
      - ./api-gateway/template-variables.conf:/etc/nginx/templates/10-variables.conf.template:ro
    environment:
      HTTPS: true
    restart: on-failure
    depends_on:
      - user-service
      - auction-service
      - bidding-service
      - zookeeper
      - kafka

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CREATE_TOPICS: "auction-created:2:1,bid-created:2:1,auction-updated:2:1"
      KAFKA_CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000 # flush faster than normal

volumes:
  pg-data:
  cache:
